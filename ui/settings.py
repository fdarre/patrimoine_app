"""
Interface des param√®tres de l'application
"""
from datetime import datetime, timedelta
from pathlib import Path  # Utiliser pathlib au lieu de os.path

import streamlit as st

from config.app_config import DATA_DIR, MAX_USERS
from database.db_config import get_db_session  # Au lieu de get_db
from database.models import User, Bank, Asset
from services.backup_service import BackupService
# Import du service d'int√©grit√©
from services.integrity_service import integrity_service
from utils.error_manager import catch_exceptions  # Ajout de ce d√©corateur pour g√©rer les exceptions
from utils.session_manager import session_manager  # Utilisation du gestionnaire de session


@catch_exceptions
def show_settings():
    """
    Affiche l'interface des param√®tres
    """
    # R√©cup√©rer l'ID utilisateur depuis le gestionnaire de session
    user_id = session_manager.get("user_id")

    if not user_id:
        st.error("Utilisateur non authentifi√©")
        return

    st.header("Param√®tres", anchor=False)

    # Ajouter l'onglet "S√©curit√©" pour les v√©rifications d'int√©grit√©
    tab1, tab2, tab3, tab4 = st.tabs(["Sauvegarde", "Utilisateurs", "S√©curit√©", "√Ä propos"])

    # Utiliser le gestionnaire de contexte pour la session DB
    with get_db_session() as db:
        with tab1:
            st.subheader("Sauvegarde et restauration")

            st.markdown("""
            Vos donn√©es sont automatiquement enregistr√©es dans une base de donn√©es chiffr√©e 
            dans le r√©pertoire 'data'. Vous pouvez cr√©er une sauvegarde chiffr√©e 
            suppl√©mentaire √† tout moment.
            """)

            col1, col2 = st.columns(2)

            with col1:
                st.write("Cr√©er une sauvegarde chiffr√©e")

                if st.button("Cr√©er une sauvegarde maintenant"):
                    with st.spinner("Cr√©ation de la sauvegarde en cours..."):
                        db_path = DATA_DIR / "patrimoine.db"  # Utilisation de Path
                        try:
                            backup_path = BackupService.create_backup(str(db_path))  # Conversion en string
                            if backup_path:
                                st.success(f"Sauvegarde cr√©√©e avec succ√®s: {Path(backup_path).name}")
                                # T√©l√©chargement de la sauvegarde
                                with open(backup_path, "rb") as f:
                                    st.download_button(
                                        "T√©l√©charger la sauvegarde",
                                        data=f.read(),
                                        file_name=Path(backup_path).name,
                                        mime="application/octet-stream"
                                    )
                            else:
                                st.error("Erreur lors de la cr√©ation de la sauvegarde")
                        except Exception as e:
                            st.error(f"Erreur lors de la cr√©ation de la sauvegarde: {str(e)}")

            with col2:
                st.write("Restaurer une sauvegarde")

                uploaded_file = st.file_uploader("Importer une sauvegarde", type=["enc"])

                if uploaded_file is not None:
                    try:
                        # Sauvegarder le fichier upload√©
                        temp_path = DATA_DIR / "temp_backup.enc"  # Utilisation de Path
                        with open(temp_path, "wb") as f:
                            f.write(uploaded_file.getvalue())

                        if st.button("Restaurer la sauvegarde"):
                            with st.spinner("Restauration en cours..."):
                                try:
                                    # D√©connecter la base de donn√©es actuelle
                                    db.close()  # Fermer la session actuelle
                                    from database.db_config import engine
                                    engine.dispose()  # Fermer toutes les connexions du pool

                                    # Restaurer la sauvegarde
                                    db_path = DATA_DIR / "patrimoine.db"  # Utilisation de Path
                                    success = BackupService.restore_backup(str(temp_path),
                                                                           str(db_path))  # Conversion en string

                                    if success:
                                        st.success("Sauvegarde restaur√©e avec succ√®s. Veuillez rafra√Æchir la page.")
                                    else:
                                        st.error("Erreur lors de la restauration de la sauvegarde.")
                                except Exception as e:
                                    st.error(f"Erreur lors du processus de restauration: {str(e)}")
                    except Exception as e:
                        st.error(f"Erreur lors de la pr√©paration de la restauration: {str(e)}")

        with tab2:
            st.subheader("Gestion des utilisateurs")

            try:
                # R√©cup√©rer l'utilisateur actuel
                current_user = db.query(User).filter(User.id == user_id).first()

                if not current_user:
                    st.error("Utilisateur non trouv√©")
                    return

                # V√©rifier si l'utilisateur est admin (le premier utilisateur est admin)
                is_admin = current_user.username == "admin"

                if is_admin:
                    # R√©cup√©rer tous les utilisateurs
                    users = db.query(User).all()

                    st.write(f"Nombre d'utilisateurs: {len(users)} (maximum: {MAX_USERS})")

                    for user in users:
                        st.markdown(f"""
                        **Utilisateur:** {user.username}  
                        **Email:** {user.email}  
                        **Actif:** {"‚úì" if user.is_active else "‚úó"}  
                        **Cr√©√© le:** {user.created_at}
                        """)

                        # Ne pas permettre de d√©sactiver l'admin
                        if user.username != "admin":
                            col1, col2 = st.columns(2)

                            with col1:
                                btn_key = f"disable_{user.id}" if user.is_active else f"enable_{user.id}"
                                btn_txt = f"D√©sactiver {user.username}" if user.is_active else f"Activer {user.username}"

                                if st.button(btn_txt, key=btn_key):
                                    try:
                                        # Basculer l'√©tat actif de l'utilisateur
                                        user.is_active = not user.is_active
                                        db.commit()
                                        action = "d√©sactiv√©" if not user.is_active else "activ√©"
                                        st.success(f"Utilisateur {user.username} {action}")
                                        st.rerun()
                                    except Exception as e:
                                        st.error(f"Erreur lors de la modification de l'utilisateur: {str(e)}")
                                        db.rollback()

                            with col2:
                                if st.button(f"Supprimer {user.username}", key=f"delete_{user.id}"):
                                    try:
                                        # V√©rifier si l'utilisateur a des donn√©es
                                        has_data = (
                                                db.query(Bank).filter(Bank.owner_id == user.id).first() is not None or
                                                db.query(Asset).filter(Asset.owner_id == user.id).first() is not None
                                        )

                                        if has_data:
                                            st.error(
                                                f"Impossible de supprimer {user.username} car il poss√®de des donn√©es")
                                        else:
                                            db.delete(user)
                                            db.commit()
                                            st.success(f"Utilisateur {user.username} supprim√©")
                                            st.rerun()
                                    except Exception as e:
                                        st.error(f"Erreur lors de la suppression de l'utilisateur: {str(e)}")
                                        db.rollback()

                        st.markdown("---")
                else:
                    st.info("Vous devez √™tre administrateur pour g√©rer les utilisateurs.")
            except Exception as e:
                st.error(f"Erreur lors du chargement des informations utilisateur: {str(e)}")

        # Nouvel onglet pour la s√©curit√© et v√©rification d'int√©grit√©
        with tab3:
            st.subheader("S√©curit√© et Int√©grit√© des donn√©es")

            st.markdown("""
            La v√©rification d'int√©grit√© permet de s'assurer que vos donn√©es chiffr√©es sont correctement accessibles
            et qu'aucune corruption n'est survenue. Cette fonctionnalit√© est particuli√®rement importante avant et
            apr√®s les mises √† jour ou les migrations de base de donn√©es.
            """)

            st.markdown("### V√©rification d'int√©grit√©")

            col1, col2 = st.columns(2)

            with col1:
                if st.button("üîç V√©rification rapide", key="integrity_check_btn"):
                    with st.spinner("V√©rification en cours..."):
                        try:
                            integrity_check = integrity_service.verify_database_integrity(db)
                            if integrity_check:
                                st.success("‚úÖ V√©rification d'int√©grit√© r√©ussie!")
                            else:
                                st.error(
                                    "‚ùå La v√©rification d'int√©grit√© a √©chou√©. Consultez les logs pour plus de d√©tails.")
                        except Exception as e:
                            st.error(f"Erreur pendant la v√©rification: {str(e)}")

            with col2:
                # Option pour activer la v√©rification p√©riodique d'int√©grit√©
                # Utiliser une cl√© diff√©rente pour le session_state et le widget
                current_check_status = session_manager.get("integrity_check_enabled", False)

                # Renommer la cl√© du widget pour √©viter le conflit
                enable_periodic_check = st.checkbox(
                    "Activer la v√©rification p√©riodique d'int√©grit√©",
                    value=current_check_status,
                    key="integrity_check_widget"
                )

                # Ne mettre √† jour le session_state que si la valeur a chang√©
                if enable_periodic_check != current_check_status:
                    session_manager.set("integrity_check_enabled", enable_periodic_check)

                if enable_periodic_check:
                    # Aussi modifier les cl√©s pour √©viter des conflits similaires
                    current_interval = session_manager.get("integrity_interval", "Hebdomadaire")
                    check_interval = st.select_slider(
                        "Intervalle de v√©rification",
                        options=["Quotidien", "Hebdomadaire", "Mensuel"],
                        value=current_interval,
                        key="integrity_interval_widget"
                    )

                    # Ne mettre √† jour que si la valeur a chang√©
                    if check_interval != current_interval:
                        session_manager.set("integrity_interval", check_interval)

                    # Afficher la prochaine v√©rification programm√©e
                    last_check = session_manager.get("last_integrity_check")

                    if last_check:
                        try:
                            last_check_date = datetime.fromisoformat(last_check)

                            # Calculer la prochaine v√©rification
                            if check_interval == "Quotidien":
                                next_check = last_check_date + timedelta(days=1)
                            elif check_interval == "Hebdomadaire":
                                next_check = last_check_date + timedelta(days=7)
                            else:  # Mensuel
                                next_check = last_check_date + timedelta(days=30)

                            st.info(f"Prochaine v√©rification: {next_check.strftime('%d/%m/%Y')}")
                        except Exception as e:
                            st.error(f"Erreur lors du calcul de la prochaine v√©rification: {str(e)}")
                    else:
                        # Premi√®re ex√©cution si aucune v√©rification n'a √©t√© faite
                        try:
                            integrity_check = integrity_service.verify_database_integrity(db)
                            session_manager.set("last_integrity_check", datetime.now().isoformat())

                            if integrity_check:
                                st.success("‚úÖ V√©rification initiale d'int√©grit√© r√©ussie!")
                            else:
                                st.error("‚ùå La v√©rification initiale d'int√©grit√© a √©chou√©.")
                        except Exception as e:
                            st.error(f"Erreur lors de la v√©rification initiale: {str(e)}")

            # Scan complet
            st.markdown("### Analyse compl√®te d'int√©grit√©")
            st.warning("‚ö†Ô∏è Cette op√©ration peut prendre du temps sur de grandes bases de donn√©es.")

            if st.button("üî¨ Analyse compl√®te", key="full_integrity_scan_btn"):
                with st.spinner("Analyse compl√®te en cours... Cela peut prendre du temps."):
                    try:
                        results = integrity_service.perform_complete_integrity_scan(db)
                        if results["passed"]:
                            st.success(f"‚úÖ Analyse compl√®te r√©ussie! {results['total_scanned']} √©l√©ments analys√©s.")
                        else:
                            st.error(
                                f"‚ùå Analyse d'int√©grit√© √©chou√©e: {results['corrupted']} √©l√©ments corrompus sur {results['total_scanned']}.")
                            # Afficher des d√©tails sur les √©l√©ments corrompus
                            if results["corrupted"] > 0:
                                with st.expander("D√©tails des √©l√©ments corrompus"):
                                    for item in results["corrupted_items"]:
                                        st.markdown(f"**{item['type']}** (ID: `{item['id']}`): {item['error']}")
                    except Exception as e:
                        st.error(f"Erreur lors de l'analyse compl√®te: {str(e)}")

            # Section pour les sauvegardes avant migration
            st.markdown("### Sauvegardes automatiques avant migration")
            st.info("""
            Les migrations de la base de donn√©es sont automatiquement pr√©c√©d√©es d'une sauvegarde de s√©curit√©.
            Vous pouvez trouver ces sauvegardes dans le r√©pertoire "data" avec le pr√©fixe "pre_migration_" ou 
            "pre_downgrade_".
            """)

        with tab4:
            st.subheader("√Ä propos de l'application")

            st.markdown("""
            ### Gestion Patrimoniale v3.0

            Cette application vous permet de g√©rer votre patrimoine financier et immobilier
            en centralisant toutes vos informations au m√™me endroit.

            **Fonctionnalit√©s principales:**
            - Authentification s√©curis√©e des utilisateurs (maximum 5)
            - Base de donn√©es SQLite chiffr√©e au niveau des champs
            - Gestion des banques et comptes
            - Suivi des actifs financiers avec allocation par cat√©gorie
            - Gestion des actifs composites
            - R√©partition g√©ographique par cat√©gorie d'actif
            - Analyses et visualisations d√©taill√©es
            - Suivi des t√¢ches
            - Historique d'√©volution
            - Sauvegardes chiffr√©es

            **Nouvelles fonctionnalit√©s v3.0:**
            - Authentification multi-utilisateurs
            - Base de donn√©es s√©curis√©e
            - Sauvegardes et restaurations chiffr√©es
            - Isolation des donn√©es par utilisateur
            - V√©rification d'int√©grit√© des donn√©es
            - Sauvegardes automatiques avant migration

            **S√©curit√©**:
            Toutes vos donn√©es sensibles sont chiffr√©es dans la base de donn√©es.
            Les mots de passe sont hach√©s et ne sont jamais stock√©s en clair.
            Les sauvegardes sont √©galement chiffr√©es pour plus de s√©curit√©.
            La v√©rification d'int√©grit√© permet de s'assurer que vos donn√©es ne sont pas corrompues.
            """)