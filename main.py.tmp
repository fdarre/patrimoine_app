"""
Point d'entr√©e principal de l'application de gestion patrimoniale
"""

import streamlit as st
import os
import time

from utils.constants import DATA_DIR
from utils.style_loader import load_css, load_js
from database.db_config import get_db, engine, Base
from ui.dashboard import show_dashboard
from ui.banks_accounts import show_banks_accounts
from ui.assets import show_asset_management
from ui.analysis import show_analysis
from ui.todos import show_todos
from ui.settings import show_settings
from ui.auth import show_auth, check_auth, logout, get_current_user_id


def main():
    """Fonction principale de l'application"""
    # Configuration de base de l'application
    st.set_page_config(
        page_title="Gestion Patrimoniale",
        page_icon="üí∞",
        layout="wide"
    )

    # Charger les styles CSS centralis√©s
    load_css()
    load_js()

    # Afficher un indicateur de chargement pendant l'initialisation
    with st.spinner("Chargement de l'application..."):
        # V√©rifier l'authentification
        is_authenticated = check_auth()

        if not is_authenticated:
            # Afficher l'interface d'authentification
            show_auth()
            return

        # R√©cup√©rer l'ID de l'utilisateur courant
        user_id = get_current_user_id()
        if not user_id:
            show_auth()
            return

    # Titre principal avec animation
    st.markdown("""
    <div style="animation: fadeIn 1s;">
        <h1 style="color:#fff;">Application de Gestion Patrimoniale</h1>
    </div>
    <style>
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    </style>
    """, unsafe_allow_html=True)

    # Navigation dans la barre lat√©rale avec ic√¥nes
    st.sidebar.title("Navigation")
    
    # Am√©lioration avec des ic√¥nes et descriptions
    nav_options = {
        "Dashboard": {"icon": "üìä", "desc": "Vue d'ensemble de votre patrimoine"},
        "Gestion des actifs": {"icon": "üíº", "desc": "Ajout et gestion de vos actifs"},
        "Banques & Comptes": {"icon": "üè¶", "desc": "Gestion des banques et comptes"},
        "Analyses": {"icon": "üìà", "desc": "Analyses d√©taill√©es et visualisations"},
        "T√¢ches (Todo)": {"icon": "‚úÖ", "desc": "Gestion des t√¢ches √† r√©aliser"},
        "Param√®tres": {"icon": "‚öôÔ∏è", "desc": "Configuration de l'application"}
    }
    
    # Cr√©er les √©l√©ments de navigation avec descriptions
    nav_html = "<div class='nav-container'>"
    for option, details in nav_options.items():
        nav_html += f"""
        <div class="nav-item" onclick="onNavigationClick('{option}')">
            <div class="nav-icon">{details['icon']}</div>
            <div class="nav-content">
                <div class="nav-title">{option}</div>
                <div class="nav-desc">{details['desc']}</div>
            </div>
        </div>
        """
    nav_html += "</div>"
    
    # Utiliser le s√©lecteur standard de Streamlit pour la navigation (le HTML ci-dessus ne peut pas √™tre utilis√© directement)
    page = st.sidebar.radio(
        "S√©lectionner une page",
        list(nav_options.keys()),
        format_func=lambda x: f"{nav_options[x]['icon']} {x}"
    )

    # Obtenir une session de base de donn√©es avec gestion des erreurs
    try:
        db = next(get_db())
    except Exception as e:
        st.error(f"Erreur de connexion √† la base de donn√©es: {str(e)}")
        st.warning("Essai de reconnexion dans 5 secondes...")
        time.sleep(5)
        try:
            db = next(get_db())
        except Exception as e:
            st.error(f"√âchec de la reconnexion: {str(e)}")
            st.info("Veuillez red√©marrer l'application.")
            return

    try:
        # Afficher un indicateur de chargement pour la page s√©lectionn√©e
        with st.spinner(f"Chargement de {page}..."):
            # Afficher la page s√©lectionn√©e
            if page == "Dashboard":
                show_dashboard(db, user_id)

            elif page == "Gestion des actifs":
                show_asset_management(db, user_id)

            elif page == "Banques & Comptes":
                show_banks_accounts(db, user_id)

            elif page == "Analyses":
                show_analysis(db, user_id)

            elif page == "T√¢ches (Todo)":
                show_todos(db, user_id)

            elif page == "Param√®tres":
                show_settings(db, user_id)
    except Exception as e:
        # Gestion globale des erreurs
        st.error(f"Une erreur s'est produite: {str(e)}")
        st.info("Si le probl√®me persiste, veuillez v√©rifier vos donn√©es ou contacter l'administrateur.")
        # Journalisation de l'erreur
        import logging
        logging.error(f"Erreur dans l'application: {str(e)}", exc_info=True)
    finally:
        # Toujours fermer la session de base de donn√©es
        db.close()

    # Afficher un message d'aide dans la barre lat√©rale
    st.sidebar.markdown("---")
    with st.sidebar.expander("üîç Aide"):
        st.markdown("""
        ### Guide rapide

        1. Commencez par ajouter des **banques** dans la section "Banques & Comptes"
        2. Puis cr√©ez des **comptes** pour chaque banque
        3. Ajoutez vos **actifs** dans ces comptes via la section "Gestion des actifs"
        4. Pour les fonds mixtes, sp√©cifiez l'allocation par cat√©gorie et la r√©partition g√©ographique pour chaque cat√©gorie
        5. Consultez votre **dashboard** et les **analyses** d√©taill√©es

        Vos donn√©es sont s√©curis√©es avec une base de donn√©es chiffr√©e et des sauvegardes automatiques.
        """)

    # Bouton de d√©connexion am√©lior√©
    if st.sidebar.button("üì§ D√©connexion"):
        with st.spinner("D√©connexion en cours..."):
            # Petit d√©lai pour le retour visuel
            time.sleep(0.5)
            logout()

    # Afficher les informations de version et l'utilisateur connect√©
    st.sidebar.markdown("---")
    st.sidebar.markdown("""
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <span style="color: #adb5bd; font-size: 0.8rem;">v3.0</span>
        <span style="color: #fff; font-weight: bold; font-size: 0.9rem;">
    """, unsafe_allow_html=True)
    
    # Afficher l'utilisateur connect√©
    if "user" in st.session_state:
        st.sidebar.markdown(f"**Utilisateur:** {st.session_state['user']}")


# Point d'entr√©e
if __name__ == "__main__":
    # S'assurer que les tables existent
    Base.metadata.create_all(bind=engine)
    main()
